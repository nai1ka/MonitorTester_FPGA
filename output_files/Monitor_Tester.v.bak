
module Monitor_Tester(
   clock,
   switch,
   disp_RGB,
   hsync,
   vsync
);
input  clock;     // Clock signal - 50 MHz
input  [1:0] switches; // switches for chooosing mode
output output reg [3:0] r_red = 0;
output output reg [3:0] r_blue = 0;
output output reg [3:0] r_green = 0; 
output  hsync;   
output  vsync;  

reg [9:0] h_count;     
reg [9:0]   v_count;   


reg[27:0] my_count;
//reg [9:0]   timer;

reg   flag;
wire  hcount_ov;
wire  vcount_ov;
wire  dat_act;
wire  hsync;
wire   vsync;
reg  vga_clk;
//VGA�С���ɨ��ʱ��������
parameter hsync_pulse   = 10'd95, // Horizontal sync pulse
   hdata_begin  = 10'd143, // Horizontal data begins (Image can be displayed)
   hdata_end  = 10'd783,
   hpixel_end  = 10'd799,
   vsync_pulse  = 10'd1,
   vdat_begin  = 10'd34,
   vdat_end  = 10'd514,
   vline_end  = 10'd524;


always @(posedge clock)
begin
 vga_clk = ~vga_clk;
  my_count<=my_count+1;
end

//************************VGA��������******************************* 
//��ɨ��     
always @(posedge vga_clk)
begin
 if (hcount_ov)
  hcount <= 10'd0;
 else
  hcount <= hcount + 10'd1;
end
assign hcount_ov = (hcount == hpixel_end);
//��ɨ��
always @(posedge vga_clk)
begin
 if (hcount_ov)
 begin
  if (vcount_ov)
   vcount <= 10'd0;
  else
   vcount <= vcount + 10'd1;
 end
end
assign  vcount_ov = (vcount == vline_end);
//���ݡ�ͬ���ź���
assign dat_act =    ((hcount >= hdat_begin) && (hcount < hdat_end))
     && ((vcount >= vdat_begin) && (vcount < vdat_end));
assign hsync = (hcount > hsync_end);
assign vsync = (vcount > vsync_end);
assign disp_RGB = (dat_act) ?  data : 3'h00;       

//************************��ʾ���ݴ�����******************************* 
//ͼƬ��ʾ��ʱ������
/*always @(posedge vga_clk)
begin
 flag <= vcount_ov;
 if(vcount_ov && ~flag)
  timer <= timer + 1'b1;
end
*/

always @(posedge vga_clk)
begin
 case(my_count[27:24])
  0: data <= h_dat;      //ѡ��������
  1: data <= v_dat;      //ѡ��������
  2: data <= (v_dat ^ h_dat); //�������̸�
  3: data <= (v_dat ~^ h_dat); //�������̸� 
  4: data <= 3'h1;
  5: data <= 3'h5; 
  6: data <= (v_dat ^ h_dat);
  7: data <= 3'h3;
  8: data <= h_dat;
  9: data <= 3'h7;
  10: data <= (v_dat ~^ h_dat);
  11: data <= v_dat; 
  12: data <= 3'h2;
  13: data <= 3'h6;
  14: data <= 3'h4;
  15: data <= 3'h0;
 endcase
end

always @(posedge vga_clk)  //����������
begin
 if(hcount < 223)
  v_dat <= 3'h7;      //��   
 else if(hcount < 303)
  v_dat <= 3'h6;   //��
 else if(hcount < 383)
  v_dat <= 3'h5;   //��
 else if(hcount < 463)
  v_dat <= 3'h4;    //��
 else if(hcount < 543)
  v_dat <= 3'h3;   //��
 else if(hcount < 623)
  v_dat <= 3'h2;   //��
 else if(hcount < 703)
  v_dat <= 3'h1;   //�
 else 
  v_dat <= 3'h0;   //��
end

always @(posedge vga_clk)  //����������
begin
 if(vcount < 94)
  h_dat <= 3'h7;        //��
 else if(vcount < 154)
  h_dat <= 3'h6;   //��
 else if(vcount < 214)
  h_dat <= 3'h5;   //��
 else if(vcount < 274)
  h_dat <= 3'h4;    //��
 else if(vcount < 334)
  h_dat <= 3'h3;   //��
 else if(vcount < 394)
  h_dat <= 3'h2;   //��
 else if(vcount < 454)
  h_dat <= 3'h1;   //�
 else 
  h_dat <= 3'h0;   //��
end

endmodule

